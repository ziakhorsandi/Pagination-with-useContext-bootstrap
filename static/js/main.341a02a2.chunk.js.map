{"version":3,"sources":["Reducer.js","Context.js","components/paginationBar.js","Actions.js","components/page.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isLoading","posts","Reducer","state","action","type","payLoad","console","error","PostsContext","React","createContext","Provider","props","useReducer","dispatch","useState","myState","setMyState","useEffect","value","children","PaginationBar","allPosts","limit","ctx","useContext","pageNum","setPageNum","nums","axios","get","then","res","data","catch","err","FetchPosts","i","Math","ceil","push","aria-label","className","href","onClick","aria-hidden","map","elem","active","key","Page","role","post","id","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gOAAaA,EAAe,CAC1BC,WAAW,EACXC,MAAO,IAGIC,EAAU,SAACC,EAAOC,GAE7B,OAAQA,EAAOC,MACb,IAAK,aACH,MAAO,CACLJ,MAAOG,EAAOE,QACdN,WAAW,GAEf,IAAK,kBACH,MAAO,CACLC,MAAO,GACPD,WAAW,GAEf,IAAK,YACH,OAAO,eACFG,EADL,CAEEH,WAAW,IAEf,QAEE,OADAO,QAAQC,MAAM,eACP,CACLR,WAAW,KCxBNS,EAAeC,IAAMC,cAAc,MAwBjCC,EAtBE,SAACC,GAAW,IAAD,EACAC,qBAAWZ,EAASH,GADpB,mBACnBI,EADmB,KACZY,EADY,OAEIC,mBAAS,eAClCjB,EADiC,CAEpCgB,SAAUA,KAJc,mBAEnBE,EAFmB,KAEVC,EAFU,KAe1B,OAPAC,qBAAU,WACRD,EAAW,eACNf,EADK,CAERY,gBAED,CAACZ,IAGF,kBAACM,EAAaG,SAAd,CAAuBQ,MAAOH,GAC3BJ,EAAMQ,WCwDEC,EAxEO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3BC,EAAMC,qBAAWjB,GADsB,EAEfO,mBAAS,GAFM,mBAEtCW,EAFsC,KAE7BC,EAF6B,OAG9BZ,mBAAS,IAAjBa,EAHsC,oBAe7C,OAVAV,qBAAU,YCNc,SAACQ,EAASH,EAAOT,GACzCA,EAAS,CAAEV,KAAM,cACjByB,IACGC,IADH,0DAEuDJ,EAFvD,mBAEyEH,IAEtEQ,MAAK,SAACC,GACLlB,EAAS,CAAEV,KAAM,aAAcC,QAAS2B,EAAIC,UAE7CC,OAAM,SAACC,GACN7B,QAAQC,MAAM,UAAW4B,GACzBrB,EAAS,CAAEV,KAAM,uBDJnBgC,CAAWV,EAASH,EAAOC,EAAIV,YAC9B,CAACY,EAASF,EAAIV,SAAUS,IAE3BL,qBAAU,WACR,IAAK,IAAImB,EAAI,EAAGA,GAAKC,KAAKC,KAAKjB,EAAWC,GAAQc,IAChDT,EAAKY,KAAKH,KAEX,CAACd,EAAOD,EAAUM,IAGnB,oCACE,yBAAKa,aAAW,2BACd,wBAAIC,UAAU,qCACZ,wBAAIA,UAAU,aACZ,uBACEA,UAAU,YACVC,KAAK,KACLF,aAAW,WACXG,QAAS,WACS,IAAZlB,GACFC,EAAWD,EAAU,KAIzB,0BAAMmB,cAAY,QAAlB,UAGHjB,EAAKkB,KAAI,SAACC,GACT,IAAIC,EAAS,GAIb,OAHID,IAASrB,IACXsB,EAAS,UAGT,wBAAIC,IAAKF,EAAML,UAAS,oBAAeM,IACrC,uBACEN,UAAU,YACVC,KAAK,KACLC,QAAS,WACPjB,EAAWoB,KAGZA,OAKT,wBAAIL,UAAU,aACZ,uBACEA,UAAU,YACVC,KAAK,KACLF,aAAW,OACXG,QAAS,WACHlB,IAAYY,KAAKC,KAAKjB,EAAWC,IACnCI,EAAWD,EAAU,KAIzB,0BAAMmB,cAAY,QAAlB,cExCCK,EAzBF,WACX,IAAM1B,EAAMC,qBAAWjB,GACfT,EAAqByB,EAArBzB,UAAWC,EAAUwB,EAAVxB,MAEnB,OAAID,EAEA,yBAAK2C,UAAU,8BAA8BS,KAAK,UAChD,0BAAMT,UAAU,WAAhB,eAKJ,wBAAIA,UAAU,cACX1C,GACCA,EAAM8C,KAAI,SAACM,GACT,OACE,wBAAIH,IAAKG,EAAKC,GAAIX,UAAU,mBACzBU,EAAKC,GADR,MACeD,EAAKE,YCAjBC,MAdf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKb,UAAU,sBACb,wBAAIA,UAAU,qBAAd,gBACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAepB,SAAU,IAAKC,MAAO,SCD3BiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAA3B,GACLD,QAAQC,MAAMA,EAAMgE,c","file":"static/js/main.341a02a2.chunk.js","sourcesContent":["export const initialState = {\r\n  isLoading: false,\r\n  posts: [],\r\n};\r\n\r\nexport const Reducer = (state, action) => {\r\n  // console.log(\"action\", action);\r\n  switch (action.type) {\r\n    case \"FETCH_POST\":\r\n      return {\r\n        posts: action.payLoad,\r\n        isLoading: false,\r\n      };\r\n    case \"FETCH_POST_FAIL\":\r\n      return {\r\n        posts: [],\r\n        isLoading: false,\r\n      };\r\n    case \"ISLOADING\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    default:\r\n      console.error(\"Reducer Err\");\r\n      return {\r\n        isLoading: false,\r\n      };\r\n  }\r\n};\r\n","import React, { useState, useReducer, useEffect } from \"react\";\r\nimport { initialState, Reducer } from \"./Reducer\";\r\nexport const PostsContext = React.createContext(null);\r\n\r\nconst Provider = (props) => {\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  const [myState, setMyState] = useState({\r\n    ...initialState,\r\n    dispatch: dispatch,\r\n  });\r\n\r\n  // EVERY TIME THE REDUCER CHANGE ITS STATE\r\n  useEffect(() => {\r\n    setMyState({\r\n      ...state,\r\n      dispatch,\r\n    });\r\n  }, [state]);\r\n\r\n  return (\r\n    <PostsContext.Provider value={myState}>\r\n      {props.children}\r\n    </PostsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Provider;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { FetchPosts } from \"../Actions\";\r\n\r\nimport { PostsContext } from \"../Context\";\r\n\r\nconst PaginationBar = ({ allPosts, limit }) => {\r\n  const ctx = useContext(PostsContext);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [nums] = useState([]);\r\n\r\n  useEffect(() => {\r\n    FetchPosts(pageNum, limit, ctx.dispatch);\r\n  }, [pageNum, ctx.dispatch, limit]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 1; i <= Math.ceil(allPosts / limit); i++) {\r\n      nums.push(i);\r\n    }\r\n  }, [limit, allPosts, nums]);\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label=\"Page navigation example\">\r\n        <ul className=\"pagination justify-content-center\">\r\n          <li className=\"page-item\">\r\n            <a\r\n              className=\"page-link\"\r\n              href=\"!#\"\r\n              aria-label=\"Previous\"\r\n              onClick={() => {\r\n                if (pageNum !== 1) {\r\n                  setPageNum(pageNum - 1);\r\n                }\r\n              }}\r\n            >\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n            </a>\r\n          </li>\r\n          {nums.map((elem) => {\r\n            let active = \"\";\r\n            if (elem === pageNum) {\r\n              active = \"active\";\r\n            }\r\n            return (\r\n              <li key={elem} className={`page-item ${active}`}>\r\n                <a\r\n                  className=\"page-link\"\r\n                  href=\"!#\"\r\n                  onClick={() => {\r\n                    setPageNum(elem);\r\n                  }}\r\n                >\r\n                  {elem}\r\n                </a>\r\n              </li>\r\n            );\r\n          })}\r\n          <li className=\"page-item\">\r\n            <a\r\n              className=\"page-link\"\r\n              href=\"!#\"\r\n              aria-label=\"Next\"\r\n              onClick={() => {\r\n                if (pageNum !== Math.ceil(allPosts / limit)) {\r\n                  setPageNum(pageNum + 1);\r\n                }\r\n              }}\r\n            >\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaginationBar;\r\n","// import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const FetchPosts = (pageNum, limit, dispatch) => {\r\n  dispatch({ type: \"ISLOADING\" });\r\n  axios\r\n    .get(\r\n      `http://jsonplaceholder.typicode.com/posts?_page=${pageNum}&_limit=${limit}`\r\n    )\r\n    .then((res) => {\r\n      dispatch({ type: \"FETCH_POST\", payLoad: res.data });\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"error :\", err);\r\n      dispatch({ type: \"FETCH_POST_FAIL\" });\r\n    });\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { PostsContext } from \"../Context\";\r\n\r\nconst Page = () => {\r\n  const ctx = useContext(PostsContext);\r\n  const { isLoading, posts } = ctx;\r\n  // // console.log(\"isLoading\", isLoading);\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {posts &&\r\n        posts.map((post) => {\r\n          return (\r\n            <li key={post.id} className=\"list-group-item\">\r\n              {post.id} - {post.title}\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\n\nimport PaginationBar from \"./components/paginationBar\";\nimport Page from \"./components/page\";\nimport Provider from \"./Context\";\n\nfunction App() {\n  return (\n    <Provider>\n      <div className=\"App container py-4\">\n        <h1 className=\"text-primary mb-4\">Posts Titles</h1>\n        <Page />\n        <div className=\"mt-4\">\n          <PaginationBar allPosts={100} limit={10} />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}